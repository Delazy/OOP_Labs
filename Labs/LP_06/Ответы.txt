//////////////////////
Чем класс отличается от структуры? 
класс – является ссылочным типом (reference type), а структуры – значимый класс (value type).
структуру нельзя наследовать
в структуре нельзя создать конструктор по умолчанию
Нельзя инициализировать переменные в месте их объявления!
	Экземпляры структуры называют значениями и “живут” они в стеке (stack).
Экземпляры классов называют объектами и “живут” они в куче (heap).

Если в своём конструкторе не будут инициализированы некоторые поля, будут ли они автоматически инициализированы компилятором?	структура - Нет

1. Это value type. То есть при передачи оной в метод и получении оной из метода, всегда передается/возвращается копия, а не ссылка на оригинал.
2. Не поддерживает наследования.
3. В следствие пункта номер два в структурах нельзя определить виртуальные члены.
4. Нельзя определить дефолтный конструктор.
5. По причине п. 4 отсутствуют инициализаторы полей.
6. Память для структуры выделяется в стеке (за некоторыми исключениями), а не на куче. Но это - деталь реализации, а не контракт.
7. Нельзя определить т.н. деструктор. По причине п. 6.

//////////////////////////////

2.  Что может и чего не может быть в структуре? 
символьный синоним какому-либо значению

4. Перечислите и поясните стандартные интерфейсы .Net? 
ICloneable, IComparable, IComparer, lEnumerabl(foreach)

5. Как используется интерфейс IComparable?
для сортировки

7. Что такое полиморфизм? Перечислите его формы. Приведите примеры. 
множественная реализация и врззможность его переопредеения 

С полиморфизмом к нам прибавляются еще несколько понятий: виртуальный/абстрактный метод, переопределение метода.

Виртуальный метод – это метод, который МОЖЕТ быть переопределен в классе-наследнике. Такой метод может иметь стандартную реализацию в базовом классе.

Абстрактный метод – это метод, который ДОЛЖЕН быть реализован в классе-наследнике. При этом, абстрактный метод не может иметь своей реализации в базовом классе (тело пустое), в отличии от виртуального.

Переопределение метода – это изменение реализации метода, установленного как виртуальный (в классе наследнике метод будет работать отлично от базового класса).




